
string          = '("(?:\\.|[^"\\])*"|\'(?:\\.|[^\'\\])*\')';
identifier      = '[a-zA-Z_][\w-]*';
whitespace      = '[ \t]+';
line_terminator	= "\n+";
comment         = "#(?!#)([^\n]*)";
directive       = "##\w+ [^\n]*";
comma           = ',';

# Simplifies internals

pipe = '\|';
left_paren = '\(';
right_paren = '\)';
left_bracket = '\[';
right_bracket = '\]';
left_brace = '\{';
right_brace = '\}';

##ignore whitespace comment line_terminator comma

# groups
parenthesized = left_paren expression right_paren;
optional = (left_bracket expression right_bracket) | (identifier '\?');
repetition = (left_brace expression right_brace) | (identifier '\*');

term = parenthesized | optional | repetition | string | identifier;

# TODO: Make this non-recursive. ATM this breaks the parser.
sequence = term*;
expression = sequence {pipe sequence};

attribute = '@' identifier;

rule = attribute* identifier '=' expression ';';

##root rule directive
