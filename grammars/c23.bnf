
comment = "\/\/[^\n]*|\/\*[\s\S]*?\*\/";
whitespace = '\s+';

##ignore comment whitespace

# String and character constants

# Due to comments handling, we need to have a literal for the entire character constant
character_constant = "(u8|u|U|L)?'([^'\\\n]|\\['\"\\?abfnrtv]|\\[0-7]{1,3}|\\x[\dA-Fa-f]+|\\u[\dA-Fa-f]{4}|\\U[\dA-Fa-f]{8})*'";

string_literal = '(u8|u|U|L)?"([^"\\\n]|\\["\'\\?abfnrtv]|\\[0-7]{1,3}|\\x[\dA-Fa-f]+|\\u[\dA-Fa-f]{4}|\\U[\dA-Fa-f]{8})*"';

token =
| keyword
| identifier 
| constant 
| string_literal 
| punctuator;

keyword = "alignas" | "alignof" | "auto" | "bool"
| "break" | "case" | "char"
| "const" | "constexpr" | "continue"
| "default" | "do" | "double" | "else"
| "enum" | "extern" | "false" | "float" | "for"
| "goto" | "if"
| "inline" | "int" | "long" | "nullptr" | "register" | "restrict" | "return"
| "short" | "signed" | "sizeof" | "static"
| "static_assert" | "struct" | "switch"
| "thread_local" | "true"
| "typedef"
| "typeof"
| "typeof_unqual" | "union" | "unsigned"
| "void"
| "volatile" | "while"
| "_Atomic"
| "_BitInt"
| "_Complex"
| "_Decimal128"
| "_Decimal32"
| "_Decimal64"
| "_Generic"
| "_Imaginary"
| "_Noreturn";

universal_character_name = "\\u[\da-fA-F]{4}|\\U[\da-fA-F]{8}";

constant =
| integer_constant 
| floating_constant 
| enumeration_constant 
| character_constant 
| predefined_constant;

integer_constant = "(0|[1-9]['\d]*|0[0-7]['0-7]+|0x[\da-f]['\da-f]*|0b[01]['01]*)(u(l|ll|wb)?|(l|ll|wb)u?)?";
##flags integer_constant i

floating_constant = "(((\d['\d]*)?\.\d['\d]*|\d['\d]*\.)(e(\+|-)?\d['\d]*)?|\d['\d]*e(\+|-)?\d['\d]*|0x(([\da-f]['\da-f]*)?\.)?[\da-f]['\da-f]*(p(\+|-)?\d['\d]*)?)(f|l|df|dd|dl)?";
##flags floating_constant i

enumeration_constant = identifier;

predefined_constant = "false" | "true" | "nullptr";

# `punctuator` minus things used later (e.g. "any pp-token other than ...")
__punctuator_base = "\." | "\+\+" | "--" | "&" | "\*" | "\+" | "-" | "~" | "!"
| "/" | "%" | "==" | "!=" | "\^" | "\|" | "&&" | "\|\|" | "\?" | ":" | "::" | ";" | "\.\.\."
| "=" | "\*=" | "/=" | "%=" | "\+=" | "-=" | "&=" | "\^=" | "\|="
| "," | "##" | "%:" | "%:%:";

__punctuator_left_angle_brackets = "<<" | "<" | "<=" | "<<=" | "<:" | "<%";
__punctuator_angle_brackets = __punctuator_left_angle_brackets | ">>" | ">" | ">=" | ">>=" | ":>" | "%>" | "->";
__punctuator_grouping = "\[" | "\]" | "\(" | "\)" | "\{" | "\}";

punctuator =  __punctuator_base | __punctuator_angle_brackets | __punctuator_grouping;

primary_expression =
| identifier
| constant
| string_literal
| ("\(" expression "\)")
| generic_selection;

generic_selection = "_Generic" "\(" assignment_expression "," generic_assoc_list "\)";

generic_assoc_list = generic_association {"," generic_association};

generic_association = (type_name | "default") ":" assignment_expression;

postfix_expression =
| primary_expression 
| (postfix_expression "\[" expression "\]")
| (postfix_expression "\(" argument_expression_list? "\)")
| (postfix_expression "\." identifier )
| (postfix_expression "->" identifier )
| (postfix_expression "\+\+")
| (postfix_expression "--")
| compound_literal;

argument_expression_list = assignment_expression {"," assignment_expression};

compound_literal = "\(" storage_class_specifiers? type_name "\)" braced_initializer;

storage_class_specifiers = storage_class_specifier*;

unary_expression =
| postfix_expression 
| ("\+\+" unary_expression)
| ("--" unary_expression)
| (unary_operator cast_expression)
| (sizeof unary_expression)
| (sizeof "\(" type_name "\)")
| (alignof "\(" type_name "\)");

unary_operator = "&" | "\*" | "\+" | "-" | "~" | "!";

cast_expression = unary_expression | ("\(" type_name "\)" cast_expression);

multiplicative_expression =
| cast_expression
| (multiplicative_expression "\*" cast_expression) 
| (multiplicative_expression "/" cast_expression) 
| (multiplicative_expression "%" cast_expression);

additive_expression =
| multiplicative_expression 
| (additive_expression "\+" multiplicative_expression) 
| (additive_expression "-" multiplicative_expression);

shift_expression =
| additive_expression 
| (shift_expression "<<" additive_expression) 
| (shift_expression ">>" additive_expression);

relational_expression =
| shift_expression 
| (relational_expression "<" shift_expression) 
| (relational_expression ">" shift_expression) 
| (relational_expression "<=" shift_expression) 
| (relational_expression ">=" shift_expression);

equality_expression =
| relational_expression 
| (equality_expression "==" relational_expression) 
| (equality_expression "!=" relational_expression);

AND_expression = equality_expression {"&" equality_expression};

exclusive_OR_expression = AND_expression {"\^" AND_expression};

inclusive_OR_expression = exclusive_OR_expression {"\|" exclusive_OR_expression};

logical_AND_expression = inclusive_OR_expression {"&&" inclusive_OR_expression};

logical_OR_expression = logical_AND_expression {"\|\|" logical_AND_expression};

conditional_expression = logical_OR_expression ["\?" expression ":" conditional_expression];

assignment_expression =
| conditional_expression
| (unary_expression assignment_operator assignment_expression);

assignment_operator = "\*=" | "/=" | "%=" | "\+=" | "-=" | "<<=" | ">>=" | "&=" | "\^=" | "\|=" | "=";

expression =
| assignment_expression 
| (expression "," assignment_expression);

constant_expression = conditional_expression;

declaration =
| (declaration_specifiers init_declarator_list? ";")
| (attribute_specifier_sequence declaration_specifiers init_declarator_list ";")
| static_assert_declaration 
| attribute_declaration;

declaration_specifiers = declaration_specifier (attribute_specifier_sequence? | declaration_specifiers);

declaration_specifier =
| storage_class_specifier 
| type_specifier_qualifier 
| function_specifier;

init_declarator_list = init_declarator {"," init_declarator};

init_declarator = declarator declarator "=" initializer;

attribute_declaration = attribute_specifier_sequence ";";

storage_class_specifier =
| "auto" 
| "constexpr"
| "extern"
| "register"
| "static"
| "thread_local"
| "typedef";

type_specifier =
| "void"
| "char"
| "short"
| "int"
| "long" 
| "float"
| "double"
| "signed"
| "unsigned"
| ("_BitInt" "\(" constant_expression "\)")
| "bool"
| "_Complex"
| "_Decimal32"
| "_Decimal64"
| "_Decimal128"
| atomic_type_specifier 
| struct_or_union_specifier 
| enum_specifier 
| typedef_name 
| typeof_specifier;

struct_or_union_specifier =
| (struct_or_union attribute_specifier_sequence? identifier? "\{" member_declaration_list "\}")
| (struct_or_union attribute_specifier_sequence? identifier);

struct_or_union = "struct" | "union";

member_declaration_list = member_declaration*;

member_declaration =
| (attribute_specifier_sequence? specifier_qualifier_list member_declarator_list? ";")
| static_assert_declaration;

specifier_qualifier_list = type_specifier_qualifier (attribute_specifier_sequence? | specifier_qualifier_list); 

type_specifier_qualifier =
| type_specifier 
| type_qualifier 
| alignment_specifier;
  
member_declarator_list = member_declarator {"," member_declarator};

member_declarator =
| declarator
| (declarator? ":" constant_expression);

enum_specifier =
| (enum attribute_specifier_sequence? identifier? enum_type_specifier? "\{" enumerator_list [","] "\}")
| (enum identifier enum_type_specifier?);

enumerator_list = enumerator {"," enumerator};

enumerator = enumeration_constant attribute_specifier_sequence? ["=" constant_expression];

enum_type_specifier = ":" specifier_qualifier_list;

atomic_type_specifier = "_Atomic" "\(" type_name "\)";

typeof_specifier =
| ("typeof" "\(" typeof_specifier_argument "\)")
| ("typeof_unqual" "\(" typeof_specifier_argument "\)");

typeof_specifier_argument = expression | type_name;

type_qualifier = "const" | "restrict" | "volatile" | "_Atomic";

function_specifier = "inline" | "_Noreturn";

alignment_specifier = "alignas" "\(" (type_name | constant_expression) "\)";

declarator = pointer? direct_declarator;

direct_declarator =
| (identifier attribute_specifier_sequence? )
| ("\(" declarator "\)")
| (array_declarator attribute_specifier_sequence?)
| (function_declarator attribute_specifier_sequence?);

array_declarator =
| (direct_declarator "\[" type_qualifier_list? assignment_expression? "\]")
| (direct_declarator "\[" "static" type_qualifier_list? assignment_expression "\]")
| (direct_declarator "\[" type_qualifier_list "static" assignment_expression "\]" )
| (direct_declarator "\[" type_qualifier_list?  "\*" "\]");

function_declarator = direct_declarator "\(" parameter_type_list? "\)";

pointer = '\*' attribute_specifier_sequence? type_qualifier_list? pointer?;

type_qualifier_list = type_qualifier*;

parameter_type_list =
| parameter_list 
| (parameter_list "," "\.\.\.")
| "\.\.\.";

parameter_list = parameter_declaration {"," parameter_declaration};

parameter_declaration = attribute_specifier_sequence? declaration_specifiers (declarator | abstract_declarator?);

type_name = specifier_qualifier_list abstract_declarator?;

abstract_declarator = pointer | (pointer? direct_abstract_declarator);

direct_abstract_declarator =
| ("\(" abstract_declarator "\)")
| (array_abstract_declarator attribute_specifier_sequence?)
| (function_abstract_declarator attribute_specifier_sequence?);

array_abstract_declarator =
| (direct_abstract_declarator? "\[" type_qualifier_list? assignment_expression? "\]")
| (direct_abstract_declarator? "\[" static type_qualifier_list? assignment_expression "\]")
| (direct_abstract_declarator? "\[" type_qualifier_list static assignment_expression "\]") 
| (direct_abstract_declarator? "\[" "\*" "\]");

function_abstract_declarator = direct_abstract_declarator? "\(" parameter_type_list? "\)";

typedef_name = identifier;

braced_initializer = "\{" [initializer_list [","]] "\}";

initializer = assignment_expression | braced_initializer;

initializer_list = designation? initializer {"," designation? initializer};

designation = designator_list "=";

designator_list = designator*;

designator =
| ("\[" constant_expression "\]")
| ("\." identifier);

static_assert_declaration = "static_assert" "\(" constant_expression ["," string_literal] "\)" ";";

attribute_specifier_sequence = attribute_specifier*;

attribute_specifier = "\[" "\[" attribute_list "\]" "\]";

attribute_list = attribute? {"," attribute?};

attribute = attribute_token attribute_argument_clause?;

attribute_token = standard_attribute | attribute_prefixed_token;

standard_attribute = identifier;

attribute_prefixed_token = attribute_prefix "::" identifier;

attribute_prefix = identifier;

attribute_argument_clause = "\(" balanced_token_sequence? "\)";

balanced_token_sequence = balanced_token*;

balanced_token =
| ("\(" balanced_token_sequence? "\)")
| ("\[" balanced_token_sequence? "\]")
| ("\{" balanced_token_sequence? "\}");
#| any token other than a parenthesis, a bracket, or a brace

statement = labeled_statement | unlabeled_statement;

unlabeled_statement =
| expression_statement 
| (attribute_specifier_sequence? primary_block) 
| (attribute_specifier_sequence? jump_statement);

primary_block =
| compound_statement 
| selection_statement 
| iteration_statement;

secondary_block = statement;

label = attribute_specifier_sequence? (identifier | ("case" constant_expression) | "default") ":";

labeled_statement = label statement;

compound_statement = "\{" block_item_list? "\}";

block_item_list = block_item*;

block_item = declaration | unlabeled_statement | label;

expression_statement = (expression? | (attribute_specifier_sequence expression)) ";";

selection_statement = 
| ("if" "\(" expression "\)" secondary_block) 
| ("if" "\(" expression "\)" secondary_block else secondary_block) 
| ("switch" "\(" expression "\)" secondary_block);

iteration_statement =
| ("while" "\(" expression "\)" secondary_block) 
| ("do" secondary_block "while" "\(" expression "\)" ";") 
| ("for" "\(" expression? ";" expression? ";" expression? "\)" secondary_block) 
| ("for" "\(" declaration expression? ";" expression? "\)" secondary_block);

jump_statement = (("goto" identifier) | "continue" | "break" | ("return" expression?)) ";";

translation_unit = external_declaration;

external_declaration = function_definition | declaration;

function_definition = attribute_specifier_sequence? declaration_specifiers declarator function_body;

function_body = compound_statement;

n_char_sequence = {digit | nondigit};
n_wchar_sequence = {digit | nondigit};
d_char_sequence = {digit | nondigit};
d_wchar_sequence = {digit | nondigit};

group_part =
| control_line
| if_section
| text_line
| ("#" non_directive);

if_section = if_group elif_group* else_group? endif_line;

if_group =
| ("#if\b" constant_expression group_part*)
| ("#ifdef\b" identifier group_part*)
| ("#ifndef\b" identifier group_part*);
##groups if_group %#if %#ifdef %#ifndef

elif_group =
| ("#elif\b" constant_expression group_part*)
| ("#elifdef\b" identifier group_part*)
| ("#elifndef\b" identifier group_part*);
##groups elif_group %#elif %#elifdef %#elifndef

else_group = "#else\b" group_part*;

endif_line = "#endif\b";

control_line = "#" (
| ("include\b" header_name)
| ("embed\b" header_name)
| ("define\b" identifier replacement_list)
| ("define\b" identifier "\(" identifier_list? "\)" replacement_list)
| ("define\b" identifier "\(" "\.\.\." "\)" replacement_list)
| ("define\b" identifier "\(" identifier_list "," "\.\.\." "\)" replacement_list)
| ("undef\b" identifier)
| ("line\b" pp_tokens)
| ("error\b" preprocessing_token*)
| ("warning\b" preprocessing_token*)
| ("pragma\b" preprocessing_token*)
);

text_line = pp_tokens;

non_directive = pp_tokens;

# a ( character not immediately preceded by white space
# TODO: Actually do a look-behind and use this
# lparen = "\(";

replacement_list = preprocessing_token*;

pp_tokens = preprocessing_token preprocessing_token*;

identifier_list = identifier {"," identifier};

pp_parameter = pp_parameter_name pp_parameter_clause?;

pp_parameter_name = pp_standard_parameter | pp_prefixed_parameter;

pp_standard_parameter = identifier;

pp_prefixed_parameter = identifier "::" identifier;

pp_parameter_clause = "\(" pp_balanced_token* "\)";

pp_balanced_token =
| __pp_token_no_grouping
| ("\(" pp_balanced_token* "\)")
| ("\[" pp_balanced_token* "\]")
| ("\{" pp_balanced_token* "\}");

# any pp_token other than a parenthesis, a bracket, or a brace
__pp_token_no_grouping =
| __pp_token_base
| __punctuator_base
| __punctuator_angle_brackets;

embed_parameter_sequence = pp_parameter*;

defined_macro_expression = "defined\b" (identifier | ("\(" identifier "\)"));

# any preprocessing_token other than >
h_preprocessing_token = 
| __pp_token_base
| __punctuator_base
| __punctuator_grouping;

h_pp_tokens = h_preprocessing_token*;

header_name_tokens = string_literal | ("<" h_pp_tokens ">");

has_include_expression = "__has_include\b" "\(" (header_name | header_name_tokens) "\)";

has_embed_expression =
| ("__has_embed\b" "\(" (header_name embed_parameter_sequence?) "\)")
| ("__has_embed\b" "\(" (header_name_tokens pp_balanced_token*) "\)");

has_c_attribute_express = "__has_c_attribute\b" "\(" pp_tokens "\)";

va_opt_replacement = "__VA_OPT__\b" "\(" preprocessing_token* "\)";

standard_pragma = "#" "pragma\b" "STDC\b" (
| ("FP_CONTRACT\b" on_off_switch)
| ("FENV_ACCESS\b" on_off_switch)
| ("FENV_DEC_ROUND\b" dec_direction)
| ("FENV_ROUND\b" direction)
| ("CX_LIMITED_RANGE\b" on_off_switch)
);

on_off_switch = "ON\b" | "OFF\b" | "DEFAULT\b";

direction =
| "FE_DOWNWARD\b"
| "FE_TONEAREST\b"
| "FE_TONEARESTFROMZERO\b" 
| "FE_TOWARDZERO\b"
| "FE_UPWARD\b"
| "FE_DYNAMIC\b";

dec_direction =
| "FE_DEC_DOWNWARD\b"
| "FE_DEC_TONEAREST\b"
| "FE_DEC_TONEARESTFROMZERO\b" 
| "FE_DEC_TOWARDZERO\b"
| "FE_DEC_UPWARD\b"
| "FE_DEC_DYNAMIC\b";

preprocessing_token = __pp_token_base | punctuator;
#| each universal_character_name that cannot be one of the above 
#| each non_white_space character that cannot be one of the above

__pp_token_base =
| header_name
| identifier
| keyword
| pp_number 
| character_constant
| string_literal;

header_name = __header_name | string_literal;

__header_name = '<[^\n>]*>|"[^\n\"]*"';

# header_name = ("<" h_char_sequence ">") | ('"' q_char_sequence '"');

# h_char_sequence = h_char*;

# # any member of the source character set except the character and >
# h_char = digit | nondigit | __punctuator_base | __punctuator_grouping | __punctuator_left_angle_brackets;

# q_char_sequence = q_char*;

# # any member of the source character set except the character and "
# q_char = digit | nondigit | punctuator;

pp_number = integer_constant | floating_constant;

identifier = "[_a-zA-Z]\w*";
