##include language.bnf

group_part =
| control_line
| if_section
| text_line
| ("#" non_directive);

if_section = if_group elif_group* else_group? endif_line;

if_group =
| ("#if\b" constant_expression group_part*)
| ("#ifdef\b" identifier group_part*)
| ("#ifndef\b" identifier group_part*);
##groups if_group %#if %#ifdef %#ifndef

elif_group =
| ("#elif\b" constant_expression group_part*)
| ("#elifdef\b" identifier group_part*)
| ("#elifndef\b" identifier group_part*);
##groups elif_group %#elif %#elifdef %#elifndef

else_group = "#else\b" group_part*;

endif_line = "#endif\b";

control_line = "#" (
| ("include\b" header_name)
| ("embed\b" header_name)
| ("define\b" identifier replacement_list)
| ("define\b" identifier "\(" identifier_list? "\)" replacement_list)
| ("define\b" identifier "\(" "\.\.\." "\)" replacement_list)
| ("define\b" identifier "\(" identifier_list "," "\.\.\." "\)" replacement_list)
| ("undef\b" identifier)
| ("line\b" pp_tokens)
| ("error\b" preprocessing_token*)
| ("warning\b" preprocessing_token*)
| ("pragma\b" preprocessing_token*)
);

text_line = pp_tokens;

non_directive = pp_tokens;

# a ( character not immediately preceded by white space
# TODO: Actually do a look-behind and use this
# lparen = "\(";

replacement_list = preprocessing_token*;

pp_tokens = preprocessing_token preprocessing_token*;

identifier_list = identifier {"," identifier};

pp_parameter = pp_parameter_name pp_parameter_clause?;

pp_parameter_name = pp_standard_parameter | pp_prefixed_parameter;

pp_standard_parameter = identifier;

pp_prefixed_parameter = identifier "::" identifier;

pp_parameter_clause = "\(" pp_balanced_token* "\)";

pp_balanced_token =
| __pp_token_no_grouping
| ("\(" pp_balanced_token* "\)")
| ("\[" pp_balanced_token* "\]")
| ("\{" pp_balanced_token* "\}");

# any pp_token other than a parenthesis, a bracket, or a brace
__pp_token_no_grouping =
| __pp_token_base
| __punctuator_base
| __punctuator_angle_brackets;

embed_parameter_sequence = pp_parameter*;

defined_macro_expression = "defined\b" (identifier | ("\(" identifier "\)"));

# any preprocessing_token other than >
h_preprocessing_token = 
| __pp_token_base
| __punctuator_base
| __punctuator_grouping;

h_pp_tokens = h_preprocessing_token*;

header_name_tokens = string_literal | ("<" h_pp_tokens ">");

has_include_expression = "__has_include\b" "\(" (header_name | header_name_tokens) "\)";

has_embed_expression =
| ("__has_embed\b" "\(" (header_name embed_parameter_sequence?) "\)")
| ("__has_embed\b" "\(" (header_name_tokens pp_balanced_token*) "\)");

has_c_attribute_express = "__has_c_attribute\b" "\(" pp_tokens "\)";

va_opt_replacement = "__VA_OPT__\b" "\(" preprocessing_token* "\)";

standard_pragma = "#" "pragma\b" "STDC\b" (
| ("FP_CONTRACT\b" on_off_switch)
| ("FENV_ACCESS\b" on_off_switch)
| ("FENV_DEC_ROUND\b" dec_direction)
| ("FENV_ROUND\b" direction)
| ("CX_LIMITED_RANGE\b" on_off_switch)
);

on_off_switch = "ON\b" | "OFF\b" | "DEFAULT\b";

direction =
| "FE_DOWNWARD\b"
| "FE_TONEAREST\b"
| "FE_TONEARESTFROMZERO\b" 
| "FE_TOWARDZERO\b"
| "FE_UPWARD\b"
| "FE_DYNAMIC\b";

dec_direction =
| "FE_DEC_DOWNWARD\b"
| "FE_DEC_TONEAREST\b"
| "FE_DEC_TONEARESTFROMZERO\b" 
| "FE_DEC_TOWARDZERO\b"
| "FE_DEC_UPWARD\b"
| "FE_DEC_DYNAMIC\b";

preprocessing_token = __pp_token_base | punctuator;
#| each universal_character_name that cannot be one of the above 
#| each non_white_space character that cannot be one of the above

__pp_token_base =
| header_name
| identifier
| pp_number 
| character_constant
| string_literal;

header_name = __header_name | string_literal;

__header_name = '<[^\n>]*>|"[^\n\"]*"';

# header_name = ("<" h_char_sequence ">") | ('"' q_char_sequence '"');

# h_char_sequence = h_char*;

# # any member of the source character set except the character and >
# h_char = digit | nondigit | __punctuator_base | __punctuator_grouping | __punctuator_left_angle_brackets;

# q_char_sequence = q_char*;

# # any member of the source character set except the character and "
# q_char = digit | nondigit | punctuator;

pp_number = "\.?[0-9](['\w]|(e|E|p|P)(\+|-)|\.)*";

identifier = "[_a-zA-Z]\w*";

##override_root group_part
