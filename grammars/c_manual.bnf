# C Language BNF
# Probably not stable.

comment            = '//.*|/\*[^*]*(\*[^/][^*]*)*\*/';
whitespace         = '\s+';
directive          = '#[^\n]*';
string_literal     = '"([^"\\]|\\.)*"';
character_literal  = '\'([^\\]|\\.)\'';
number             = '(0[xX][0-9a-fA-F]+|\d+)';

type_namespace = 'enum' | 'struct' | 'union';
type_keyword = 'long' | 'short' | 'signed' | 'unsigned';
storage_specifier = 'register' | 'static';

identifier         = '[a-zA-Z_]\w*';

left_paren  = '\(';
right_paren = '\)';
left_bracket = '\[';
right_bracket = '\]';

##ignore comment whitespace

# Keywords



keyword = type_keyword | type_namespace | storage_specifier | 'break' | 'case' | 'continue' | 'default' | 'do' | 'else' | 'for' | 'goto' | 'if' | 'return' | 'sizeof' | 'switch' | 'typedef' | 'void' | 'while';

# Operators and punctuation
access_operator = '\.|->';
math_only_operator = '\+\+|--|\+|-|/|%|<<|>>|<|<=|>|>=|==|!=|&&|\|\||&|\||\^|\!|~';
ptr_or_mul = '\*';
math_operator = ptr_or_mul | math_only_operator;
assignment_operator = '\+=|-=|\*=|/=|%=|<<=|>>=|&=|\|=|\^=';

operator = math_operator | assignment_operator | access_operator | '=' | '\?|:' | ',' | ';' | left_paren | right_paren | left_bracket | right_bracket;

# Expressions
nested_expression = left_paren, expression, right_paren;

binary_expression = expression, operator, expression;

expression = primary_expression
		   | nested_expression
		   | binary_expression;

argument_list = expression, {',', expression};

function_call = identifier, left_paren, [argument_list], right_paren;

primary_expression = function_call
				   | identifier
				   | number
				   | string_literal
				   | character_literal;

constant_expression = number | character_literal | (left_paren, constant_expression, operator, constant_expression, right_paren);


# Declarations

base_type = (type_namespace, identifier) | ([type_keyword], (identifier | type_keyword)) | 'void';

type_specifier =  ['const' | 'volatile'], [storage_specifier], base_type;

declarator = {ptr_or_mul}, identifier, [left_bracket, [number], right_bracket];

declaration = type_specifier, declarator, {identifier};

full_declaration = ['extern'], (function_delcaration | declaration, ['=', initializer]), ';';

function_delcaration = type_specifier, declarator, left_paren, [declaration, {',', declaration}], right_paren;

named_initializer = ('.', identifier | left_bracket, identifier, right_bracket), '=', initializer;

record_initializer_list = named_initializer, {',', named_initializer};

initializer_list = initializer, {',', initializer} | record_initializer_list;

initializer = expression | '\{', initializer_list, '\}';




# Statements
statement =  expression_statement
          | iteration_statement
          | jump_statement
          | compound_statement
          | selection_statement
		  | labeled_statement;

labeled_statement = (identifier | 'case', constant_expression | 'default'), ':', statement;

compound_statement = '\{', {full_declaration | statement}, '\}';

expression_statement = [expression], ';';

selection_statement = 'if', left_paren, expression, right_paren, statement, ['else', statement];

iteration_statement = ('while', left_paren, expression, right_paren, statement)
					| ('do', statement, 'while', left_paren, expression, right_paren, ';')
					| ('for', left_paren, [expression], ';', [expression], ';', [expression], right_paren, statement);

jump_statement = 'goto', identifier, ';' | 'continue', ';' | 'break', ';' | 'return', [expression], ';';

function_definition = function_delcaration, compound_statement;

# Translation Unit
translation_unit = full_declaration | function_definition;

##root translation_unit directive
