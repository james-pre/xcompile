
string          = '("(?:\\.|[^"\\])*"|\'(?:\\.|[^\'\\])*\')';
identifier      = '[a-zA-Z_]\w*';
whitespace      = '[ \t]+';
line_terminator	= "\n+";
comment         = "#(?!#)([^\n]*)";
directive       = "##\w+ [^\n]*";

# Simplifies internals

pipe = '\|';
left_paren = '\(';
right_paren = '\)';
left_bracket = '\[';
right_bracket = '\]';
left_brace = '\{';
right_brace = '\}';

##ignore whitespace comment line_terminator

# groups
parenthesized = left_paren, expression, right_paren;
optional = left_bracket, expression, right_bracket;
repetition = left_brace, expression, right_brace;

term = string | identifier | parenthesized | optional | repetition;

# TODO: Make this non-recursive. ATM this breaks the parser.
sequence = term, {',', term};
expression = sequence, {pipe, sequence};

rule = identifier, '=', expression, ';';

rule_list = rule | directive;

##root rule_list
